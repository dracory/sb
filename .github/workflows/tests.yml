# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Install PostgreSQL client
      run: |
        apt-get update
        apt-get install --yes postgresql-client

    # queries database with postgres client
    - name: Query database
      run: psql -h postgres -d test -U test -c 'SELECT 1;'
      env:
        # postgress password is required; alternatively, you can run:
        # `PGPASSWORD=postgres_password psql ...`
        PGPASSWORD: test

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./...

    services:
      # MySQL service
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: test
          MYSQL_DATABASE: test
          MYSQL_USER: test
          MYSQL_PASSWORD: test
        ports:
          - "33306:3306"
        options: >-
          --health-cmd "mysqladmin ping -u test -p test"
          --health-interval 20s
          --health-timeout 15s
          --health-retries 5
        # volumes:
        #   - ./mysql-data:/var/lib/mysql

      # PostgreSQL service
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
          POSTGRES_USER: test
        ports:
          - "55432:5432"
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        # volumes:
        #   - ./postgres-data:/var/lib/postgresql/data
